import { writeFile } from 'node:fs/promises';
import { configs } from '../src/configs';
import * as prettier from 'prettier';
import { Linter } from 'eslint';

import { appDirResolve } from '../common';

const FILE_NAME = 'generatedConfigs.ts';

const SAVE_PATH = './src/';

const configsValue: string = Object.entries(configs).reduce(
	(accumulator: string, [key, value]): string => {
		const valueCopy = JSON.parse(JSON.stringify(value)) as Readonly<
			Linter.Config<Linter.RulesRecord>
		>[];

		const withMergedRules: Linter.Config[] = Object.values(
			valueCopy.reduce(
				(
					accumulator: Record<string, Linter.Config>,
					{ files, languageOptions, rules, settings }: Linter.Config,
				) => {
					const configKey: string | undefined = files?.join('');

					if (configKey !== undefined && configKey.length > 0) {
						const configValue: Linter.Config = {
							name: key,
							files,
							languageOptions,
							rules,
							settings,
						};

						if (configKey in accumulator) {
							const existingConfigValue: Linter.Config = accumulator[configKey];

							configValue.languageOptions = {
								...existingConfigValue.languageOptions,
								...languageOptions,
							};

							configValue.rules = {
								...existingConfigValue.rules,
								...rules,
							};

							configValue.settings = {
								...existingConfigValue.settings,
								...settings,
							};
						}

						accumulator[configKey] = configValue;
					}

					return accumulator;
				},
				{},
			),
		);

		const withSortedRules: Linter.Config<Linter.RulesRecord>[] =
			withMergedRules.map(
				({
					name,
					files,
					languageOptions = {},
					rules = {},
					settings = {},
				}: Linter.Config<Linter.RulesRecord>): Linter.Config<Linter.RulesRecord> => ({
					name,
					files,
					rules: Object.fromEntries(
						Object.entries(rules).sort(([a], [b]) => a.localeCompare(b)),
					),
					languageOptions:
						Object.values(languageOptions).length > 0
							? languageOptions
							: undefined,
					settings: Object.values(settings).length > 0 ? settings : undefined,
				}),
			);

		return accumulator + `${key}:${JSON.stringify(withSortedRules)},`;
	},
	'',
);

const result = `
	// THIS IS A GENERATED FILE â€“ DO NOT EDIT!!!
	// Generated by '/scripts/generateConfigs.ts'\n
	import {type Configs} from './types';\n
	const configs:Configs={${configsValue}};\n
	export default configs;
	`;

const prettierConfig = await prettier.resolveConfig('./.prettierrc.json');

const formattedResult: string = await prettier.format(result, {
	...prettierConfig,
	parser: 'typescript',
});

await writeFile(appDirResolve(SAVE_PATH, FILE_NAME), formattedResult);
